{"version":3,"sources":["square.js","board.js","history.js","tutorialExtraTasks.js","game.js","calculateWinner.js","index.js"],"names":["Square","props","classNames","isSelected","react_default","a","createElement","className","onClick","value","Board","i","_this","this","lastSelected","winnerMoves","indexOf","key","squares","row","cols","numCols","push","renderSquare","board","numRows","renderBoardRowCols","React","Component","History","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","ascSortOrder","handleToggleClick","bind","assertThisInitialized","setState","_this2","toggleText","movesHist","history","slice","len","length","reverse","moves","map","step","move","stepNumber","isStart","desc","cell","parseInt","TutorialExtraTasks","tasks","task","index","Game","Array","fill","xIsNext","result","lines","_lines$i","slicedToArray","b","c","winner","calculateWinner","getWinner","concat","currentSelected","currentwinner","status","current","src_board","handleClick","src_history","jumpTo","ReactDOM","render","game","document","getElementById"],"mappings":"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","file":"static/js/main.9e08618d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Square(props) {\r\n    let classNames = \"square\"\r\n    if (props.isSelected)\r\n        classNames += \" square-selected\"\r\n    return (\r\n        <button className={classNames}\r\n            onClick={props.onClick}>\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Square from './square';\r\n\r\nclass Board extends React.Component {\r\n\r\n    renderSquare(i) {\r\n        let isSelected = this.props.lastSelected === i;\r\n        if (this.props.winnerMoves) {\r\n            isSelected = this.props.winnerMoves.indexOf(i) !== -1\r\n        }\r\n        return (<Square key={i}\r\n            isSelected={isSelected}\r\n            value={this.props.squares[i]}\r\n            onClick={() => this.props.onClick(i)}\r\n        />);\r\n    }\r\n\r\n    renderBoardRowCols(row) {\r\n        let cols = []\r\n        for (var i = 0; i < this.props.numCols; i++) {\r\n            cols.push(<td key={row + i}>\r\n                {this.renderSquare(row + i)}\r\n            </td>\r\n            );\r\n        }\r\n        return (<tr key={row}>{cols}</tr>);\r\n    }\r\n\r\n    render() {\r\n        let board = []\r\n        for (var i = 0; i < this.props.numRows; i++) {\r\n            board.push(this.renderBoardRowCols(this.props.numRows * i))\r\n        }\r\n        return (\r\n            <table>\r\n                <tbody>\r\n                    {board}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\n\r\nclass History extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            ascSortOrder: true\r\n        }\r\n        this.handleToggleClick.bind(this);\r\n    }\r\n\r\n    handleToggleClick() {\r\n        this.setState({\r\n            ascSortOrder: !this.state.ascSortOrder\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const ascSortOrder = this.state.ascSortOrder\r\n        const toggleText = ascSortOrder ? \"Sort Descending\" : \"Sort Ascending\";\r\n        const movesHist = this.props.history.slice()\r\n        const len = movesHist.length - 1\r\n        if (!ascSortOrder)\r\n            movesHist.reverse()\r\n        const moves = movesHist.map((step, move) => {\r\n            let stepNumber = move\r\n            let isStart = move === 0\r\n            if (!ascSortOrder) {\r\n                isStart = move === len\r\n                stepNumber = (len - move)\r\n            }\r\n            const classNames = this.props.stepNumber === stepNumber ? \"history-current-step\" : \"history-step\";\r\n            let desc = 'Go to game start'\r\n            if (!isStart) {\r\n                desc = 'Go to move #' + (stepNumber)\r\n                if (step.cell >= 0) {\r\n                    let row = parseInt(step.cell / this.props.numRows) + 1\r\n                    let col = (step.cell % this.props.numCols) + 1\r\n                    desc = 'Go to move #' + (stepNumber) + \"(\" + row + \",\" + col + \")\"\r\n                }\r\n            }\r\n            return (\r\n                <li key={move} className={classNames}>\r\n                    <button onClick={() => this.props.onClick(move)}>\r\n                        {desc}\r\n                    </button>\r\n                </li>\r\n            );\r\n        });\r\n        return (\r\n            <div className=\"history-moves\">\r\n                <strong>Moves: </strong>\r\n                <button onClick={() => this.handleToggleClick()}>{toggleText}</button>\r\n                <ol>{moves}</ol>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default History;\r\n","import React from 'react';\r\n\r\nexport default function TutorialExtraTasks() {\r\n    const extraTasks = [\r\n        \"Display the location for each move in the format (col, row) in the move history list.\",\r\n        \"When no one wins, display a message about the result being a draw.\",\r\n        \"Add a toggle button that lets you sort the moves in either ascending or descending order.\",\r\n        \"Rewrite Board to use two loops to make the squares instead of hardcoding them.\",\r\n        \"When someone wins, highlight the three squares that caused the win.\",\r\n        \"Bold the currently selected item.\",\r\n        \"Bold the currently selected item in the move list.\"\r\n    ]\r\n    const tasks = extraTasks.map(function (task, index) {\r\n        return <li key={index}>{task}</li>\r\n    });\r\n    return (\r\n        <div>\r\n            <h1>Tutorial: Extra Tasks</h1>\r\n            <ol>\r\n                {tasks}\r\n            </ol>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport calculateWinner from './calculateWinner';\r\nimport Board from './board';\r\nimport History from './history';\r\nimport TutorialExtraTasks from './tutorialExtraTasks';\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(9).fill(null),\r\n            }],\r\n            stepNumber: 0,\r\n            xIsNext: true,\r\n            numRows: 3,\r\n            lastSelected: null\r\n        };\r\n    }\r\n\r\n    getWinner(squares, cell) {\r\n        let result = calculateWinner(squares)\r\n        if (result) {\r\n            result.winner = 'Winner: ' + result.winner\r\n        }\r\n        else if (squares[cell] && this.state.stepNumber === squares.length) {\r\n            result = {\r\n                winner: 'Draw'\r\n            }\r\n        }\r\n        return result\r\n    }\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        const hasWinner = this.getWinner(squares, i);\r\n        if (hasWinner || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n            history: history.concat([{\r\n                squares: squares,\r\n                cell: i\r\n            }]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext,\r\n            lastSelected: i\r\n        });\r\n    }\r\n\r\n    jumpTo(step) {\r\n        let currentSelected = this.state.lastSelected\r\n        let currentwinner = this.state.winner\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0,\r\n            lastSelected: step > 0 ? currentSelected : null,\r\n            winner: step > 0 ? currentwinner : null,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history\r\n        const current = history[this.state.stepNumber]\r\n        const result = this.getWinner(current.squares, this.state.lastSelected)\r\n\r\n        let status;\r\n        if (result) {\r\n            status = result.winner;\r\n        } else {\r\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O')\r\n        }\r\n        return (\r\n            <div>\r\n                <h1>Tutorial: Intro to React</h1>\r\n                <div className=\"name-hidden\">Adan Dominguez Ramirez</div>\r\n                <div className=\"game\">\r\n                    <div className=\"game-board\">\r\n                        <Board\r\n                            lastSelected={this.state.lastSelected}\r\n                            numRows={this.state.numRows}\r\n                            numCols={this.state.numRows}\r\n                            winnerMoves={result && result.moves}\r\n                            squares={current.squares}\r\n                            onClick={(i) => this.handleClick(i)}\r\n                        />\r\n                    </div>\r\n                    <div className=\"game-info\">\r\n                        <div className=\"game-status\">{status}</div>\r\n                        <History\r\n                            numRows={this.state.numRows}\r\n                            numCols={this.state.numRows}\r\n                            stepNumber={this.state.stepNumber}\r\n                            history={history}\r\n                            onClick={(i) => this.jumpTo(i)} />\r\n                    </div>\r\n                </div>\r\n                <TutorialExtraTasks />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game;\r\n","export default function calculateWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return {\r\n                moves: lines[i],\r\n                winner: squares[a]\r\n            };\r\n        }\r\n    }\r\n    return null;\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './game';\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}